doctype html
html(lang='en')
  head
    //- Required meta tags
    meta(charset='utf-8')
    meta(name='viewport', content='width=device-width, initial-scale=1')

    //- Bootstrap CSS
    link(href='https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css', rel='stylesheet', integrity='sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC', crossorigin='anonymous')

    //- Customized CSS
    style.
      .time-container {
        position: relative !important;
        min-height: 3rem;
      }

      .time {
        position: absolute;
        transform: translate(-50%,-50%) !important;
        left: 50% !important;
        top: 50% !important;
        padding-top: 0.3rem;
      }

    title {{ title }}

  body
    //- navbar & control panel
    nav.navbar.navbar-expand-md.sticky-top.navbar-dark.bg-primary
      .container
        .navbar-brand {{ title }}

        //- hamburger
        button.navbar-toggler(type='button', data-bs-toggle='collapse', data-bs-target='#navbarSupportedContent')
          span.navbar-toggler-icon

        //- control panel
        #navbarSupportedContent.collapse.navbar-collapse.justify-content-end
          form.d-flex
            select#timezone.form-select
              {% for tz in timezones %}
              option(value='{{ tz.name }}') ({{ tz.offset_display }}) {{ tz.short_name }}
              {%- endfor %}
            button#gotoNow.btn.btn-outline-light.ms-2(type='button') Now

    //- jobs
    #timetable.container
      #timecard-now.row.mt-3
        .card.text-white.bg-secondary
          .row
            .col-md-2.time-container
              .time
                h4 hh:mm
            .col-md-10
              .card-body
                h4.card-title Now

      {%- for job in jobs %}
      .row.mt-3
        .card
          .row
            .col-md-2.time-container
              .time(data-datetime='{{ job.datetime }}')
                h4 --:--
            .col-md-10
              .card-body
                h5.card-title {{ job.name }}
                {%- if job.description %}
                p.card-text {{ job.description }}
                {%- endif %}
                p.card-text.text-muted
                  {%- if job.labels %}
                  small.
                    Labels:
                    {% for lb in job.labels %}
                    <span class='badge bg-secondary me-1'>{{ lb }}</span>
                    {%- endfor %}
                  {%- endif %}
                  br
                  small Schedule: <code>{{ job.schedule }}</code> @{{ job.timezone }}; Time: <span class='detail-time'></span> (<span class='relative-time'>--</span>)
      {%- endfor %}

    //- Scripts
    //- Bootstrap
    script(src='https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js' integrity='sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM' crossorigin='anonymous')

    //- day.js
    script(src='https://cdnjs.cloudflare.com/ajax/libs/dayjs/1.11.7/dayjs.min.js' integrity='sha512-hcV6DX35BKgiTiWYrJgPbu3FxS6CsCjKgmrsPRpUPkXWbvPiKxvSVSdhWX0yXcPctOI2FJ4WP6N1zH+17B/sAA==' crossorigin='anonymous' referrerpolicy='no-referrer')
    script(src='https://cdnjs.cloudflare.com/ajax/libs/dayjs/1.11.7/plugin/utc.min.js' integrity='sha512-z84O912dDT9nKqvpBnl1tri5IN0j/OEgMzLN1GlkpKLMscs5ZHVu+G2CYtA6dkS0YnOGi3cODt3BOPnYc8Agjg==' crossorigin='anonymous' referrerpolicy='no-referrer')
    script(src='https://cdnjs.cloudflare.com/ajax/libs/dayjs/1.11.7/plugin/timezone.min.js' integrity='sha512-fG1tT/Wn/ZOyH6/Djm8HQBuqvztPQdK/vBgNFLx6DQVt3yYYDPN3bXnGZT4z4kAnURzGQwAnM3CspmhLJAD/5Q==' crossorigin='anonymous' referrerpolicy='no-referrer')
    script(src='https://cdnjs.cloudflare.com/ajax/libs/dayjs/1.11.7/plugin/relativeTime.min.js' integrity='sha512-MVzDPmm7QZ8PhEiqJXKz/zw2HJuv61waxb8XXuZMMs9b+an3LoqOqhOEt5Nq3LY1e4Ipbbd/e+AWgERdHlVgaA==' crossorigin='anonymous' referrerpolicy='no-referrer')
    script(src='https://cdnjs.cloudflare.com/ajax/libs/dayjs/1.11.7/plugin/isToday.min.js' integrity='sha512-wDcF/3o0NA8ZSiwAQwhkCs7wMb8RKAn/jkW4b3tlxassNYUO46MsD0MuFOc16LNtkmkCH+qxQTAc+3/5JsTEoA==' crossorigin='anonymous' referrerpolicy='no-referrer')
    script(src='https://cdnjs.cloudflare.com/ajax/libs/dayjs/1.11.7/plugin/isTomorrow.min.js' integrity='sha512-vLarZYh+kxl2xV1XWlR4a1RmYYMo4x/wKxGoEej5Pl0GocYdniaoNX59/Yi5mbkSWvEbU2KG8xDGrbf5Z+rLKw==' crossorigin='anonymous' referrerpolicy='no-referrer')
    script(src='https://cdnjs.cloudflare.com/ajax/libs/dayjs/1.11.7/plugin/isYesterday.min.js' integrity='sha512-rUcTkOsI327H2BdFMhZGTvQN9uIkzNWXmun/GuK8LnVzk5AiczjnbBfN41PokBGxLyMU6tWOR/BbzbFIrji8Kg==' crossorigin='anonymous' referrerpolicy='no-referrer')
    script.
      dayjs.extend(window.dayjs_plugin_utc);
      dayjs.extend(window.dayjs_plugin_timezone);
      dayjs.extend(window.dayjs_plugin_relativeTime);
      dayjs.extend(window.dayjs_plugin_isToday);
      dayjs.extend(window.dayjs_plugin_isTomorrow);
      dayjs.extend(window.dayjs_plugin_isYesterday);

    //- Custom
    script(src='{{ url_for("static", filename="timetable.js") }}')
    script.
      'use strict';

      const STORAGE_KEY_TIME_ZONE = 'timeZone';

      (function() {
        let settings = {
          timeZone: localStorage.getItem(STORAGE_KEY_TIME_ZONE) || Intl.DateTimeFormat().resolvedOptions().timeZone
        };

        function setTimeZone(v) {
          settings.timeZone = v;
          localStorage.setItem(STORAGE_KEY_TIME_ZONE, v);
          refreshDatetime();
        }

        function refreshDatetime() {
          let now = dayjs();

          //- move 'now' card
          let timeCardNow = document.getElementById('timecard-now');
          timeCardNow.remove();

          let timeCardContainer = document.getElementById('timetable');
          let timeDoms = timeCardContainer.querySelectorAll('.time');
          let nextDom = undefined;
          for (let td of timeDoms) {
            let t = dayjs(td.dataset.datetime);
            if (t.isAfter(now)) {
              nextDom = td;
              break;
            }
          }

          if (nextDom) {
            let card = nextDom.closest('.card').closest('.row');
            timeCardContainer.insertBefore(timeCardNow, card);
          } else {
            timeCardContainer.appendChild(timeCardNow);
          }

          timeCardNow.scrollIntoView({block: 'center'});

          // refresh time labels
          document.querySelectorAll('.time').forEach((e) => {
            let dateTime = dayjs(e.dataset.datetime);

            // show brief exec time
            let timeStr = dateTime.tz(settings.timeZone).format('HH:mm');
            let briefExecStr = `<h4>${timeStr}</h4>`;

            let dateStr = undefined;
            if (dateTime.isTomorrow()) {
              dateStr = 'Tomorrow';
            } else if (dateTime.isYesterday()) {
              dateStr = 'Yesterday';
            } else if (!dateTime.isToday()) {
              dateStr = dateTime.format('MMM DD');
            }
            if (dateStr) {
              briefExecStr = dateStr + briefExecStr;
            }

            e.innerHTML = briefExecStr;

            // show detail time
            let cardDom = e.closest('.card');
            let detailTimeLabel = cardDom.querySelector('.detail-time');
            if (detailTimeLabel) {
              detailTimeLabel.innerHTML = dateTime.format('YYYY-MM-DD HH:mm:ss Z');
            }

            // show relative time
            let relativeTimeLabel = cardDom.querySelector('.relative-time');
            if (relativeTimeLabel) {
              relativeTimeLabel.innerHTML = dateTime.from(now);
            }
          });
        }

        //- init
        (function() {
          //- time zone
          let timeZoneSelectDom = document.getElementById('timezone');
          timeZoneSelectDom.value = settings.timeZone;
          timeZoneSelectDom.addEventListener('change', (e) => {
            setTimeZone(e.target.value);
          });

          //- refresh times
          refreshDatetime();
        })();

        console.log('settings', settings); // TODO
      })();
